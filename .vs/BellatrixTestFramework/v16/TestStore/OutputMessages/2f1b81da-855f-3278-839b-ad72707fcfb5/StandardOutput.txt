Start Test AngularTests.ShouldGreetUsingBinding
Type 'Julie' into control (Angular Model = 
function getNg1Hooks(selector, injectorPlease) {
    function tryEl(el) {
        try {
            if (!injectorPlease && angular.getTestability) {
                var $$testability = angular.getTestability(el);
                if ($$testability) {
                    return {$$testability: $$testability};
                }
            } else {
                var $injector = angular.element(el).injector();
                if ($injector) {
                    return {$injector: $injector};
                }
            }
        } catch(err) {} 
    }
    function trySelector(selector) {
        var els = document.querySelectorAll(selector);
        for (var i = 0; i < els.length; i++) {
            var elHooks = tryEl(els[i]);
            if (elHooks) {
                return elHooks;
            }
        }
    }

    if (selector) {
        return trySelector(selector);
    } else if (window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__) {
        var $injector = window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__;
        var $$testability = null;
        try {
            $$testability = $injector.get('$$testability');
        } catch (e) {}
        return {$injector: $injector, $$testability: $$testability};
    } else {
        return tryEl(document.body) ||
            trySelector('[ng-app]') || trySelector('[ng\\:app]') ||
            trySelector('[ng-controller]') || trySelector('[ng\\:controller]');
    }
};

var model = arguments[0];
var using = arguments[2] || document;
if (angular.getTestability) {
    return getNg1Hooks(arguments[1]).$$testability.
        findModels(using, model, true);
}
var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var inputs = using.querySelectorAll(selector);
    if (inputs.length) {
        return inputs;
    }
})
Validate control (Angular Binding = 
function getNg1Hooks(selector, injectorPlease) {
    function tryEl(el) {
        try {
            if (!injectorPlease && angular.getTestability) {
                var $$testability = angular.getTestability(el);
                if ($$testability) {
                    return {$$testability: $$testability};
                }
            } else {
                var $injector = angular.element(el).injector();
                if ($injector) {
                    return {$injector: $injector};
                }
            }
        } catch(err) {} 
    }
    function trySelector(selector) {
        var els = document.querySelectorAll(selector);
        for (var i = 0; i < els.length; i++) {
            var elHooks = tryEl(els[i]);
            if (elHooks) {
                return elHooks;
            }
        }
    }

    if (selector) {
        return trySelector(selector);
    } else if (window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__) {
        var $injector = window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__;
        var $$testability = null;
        try {
            $$testability = $injector.get('$$testability');
        } catch (e) {}
        return {$injector: $injector, $$testability: $$testability};
    } else {
        return tryEl(document.body) ||
            trySelector('[ng-app]') || trySelector('[ng\\:app]') ||
            trySelector('[ng-controller]') || trySelector('[ng\\:controller]');
    }
};

var binding = arguments[0];
var exactMatch = arguments[1];
var using = arguments[3] || document;
if (angular.getTestability) {
    return getNg1Hooks(arguments[2]).$$testability.
        findBindings(using, binding, exactMatch);
}
var bindings = using.getElementsByClassName('ng-binding');
var matches = [];
for (var i = 0; i < bindings.length; ++i) {
    var dataBinding = angular.element(bindings[i]).data('$binding');
    if (dataBinding) {
        var bindingName = dataBinding.exp || dataBinding[0].exp || dataBinding;
        if (exactMatch) {
            var matcher = new RegExp('({|\\s|^|\\|)' +
                /* See http://stackoverflow.com/q/3561711 */
                binding.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&') +
                '(}|\\s|$|\\|)');
            if (matcher.test(bindingName)) {
                matches.push(bindings[i]);
            }
        } else {
            if (bindingName.indexOf(binding) != -1) {
                matches.push(bindings[i]);
            }
        }
    }
}
return matches;) inner text is 'Hello Julie!'


Debug Trace:
Start Test AngularTests.ShouldGreetUsingBinding
OpenQA.Selenium.WebDriverException: javascript error: getAllAngularRootElements is not defined
  (Session info: chrome=87.0.4280.88)
   at OpenQA.Selenium.Remote.RemoteWebDriver.UnpackAndThrowOnError(Response errorResponse)
   at OpenQA.Selenium.Remote.RemoteWebDriver.Execute(String driverCommandToExecute, Dictionary`2 parameters)
   at OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScriptCommand(String script, String commandName, Object[] args)
   at OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScript(String script, Object[] args)
   at Bellatrix.Web.JavaScriptService.Execute(String script) in D:\SourceCode\BELLATRIX\Framework\Bellatrix.Web\Services\JavaScriptService.cs:line 53
Type 'Julie' into control (Angular Model = 
function getNg1Hooks(selector, injectorPlease) {
    function tryEl(el) {
        try {
            if (!injectorPlease && angular.getTestability) {
                var $$testability = angular.getTestability(el);
                if ($$testability) {
                    return {$$testability: $$testability};
                }
            } else {
                var $injector = angular.element(el).injector();
                if ($injector) {
                    return {$injector: $injector};
                }
            }
        } catch(err) {} 
    }
    function trySelector(selector) {
        var els = document.querySelectorAll(selector);
        for (var i = 0; i < els.length; i++) {
            var elHooks = tryEl(els[i]);
            if (elHooks) {
                return elHooks;
            }
        }
    }

    if (selector) {
        return trySelector(selector);
    } else if (window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__) {
        var $injector = window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__;
        var $$testability = null;
        try {
            $$testability = $injector.get('$$testability');
        } catch (e) {}
        return {$injector: $injector, $$testability: $$testability};
    } else {
        return tryEl(document.body) ||
            trySelector('[ng-app]') || trySelector('[ng\\:app]') ||
            trySelector('[ng-controller]') || trySelector('[ng\\:controller]');
    }
};

var model = arguments[0];
var using = arguments[2] || document;
if (angular.getTestability) {
    return getNg1Hooks(arguments[1]).$$testability.
        findModels(using, model, true);
}
var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var inputs = using.querySelectorAll(selector);
    if (inputs.length) {
        return inputs;
    }
})
OpenQA.Selenium.WebDriverException: javascript error: getAllAngularRootElements is not defined
  (Session info: chrome=87.0.4280.88)
   at OpenQA.Selenium.Remote.RemoteWebDriver.UnpackAndThrowOnError(Response errorResponse)
   at OpenQA.Selenium.Remote.RemoteWebDriver.Execute(String driverCommandToExecute, Dictionary`2 parameters)
   at OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScriptCommand(String script, String commandName, Object[] args)
   at OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScript(String script, Object[] args)
   at Bellatrix.Web.JavaScriptService.Execute(String script) in D:\SourceCode\BELLATRIX\Framework\Bellatrix.Web\Services\JavaScriptService.cs:line 53
Validate control (Angular Binding = 
function getNg1Hooks(selector, injectorPlease) {
    function tryEl(el) {
        try {
            if (!injectorPlease && angular.getTestability) {
                var $$testability = angular.getTestability(el);
                if ($$testability) {
                    return {$$testability: $$testability};
                }
            } else {
                var $injector = angular.element(el).injector();
                if ($injector) {
                    return {$injector: $injector};
                }
            }
        } catch(err) {} 
    }
    function trySelector(selector) {
        var els = document.querySelectorAll(selector);
        for (var i = 0; i < els.length; i++) {
            var elHooks = tryEl(els[i]);
            if (elHooks) {
                return elHooks;
            }
        }
    }

    if (selector) {
        return trySelector(selector);
    } else if (window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__) {
        var $injector = window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__;
        var $$testability = null;
        try {
            $$testability = $injector.get('$$testability');
        } catch (e) {}
        return {$injector: $injector, $$testability: $$testability};
    } else {
        return tryEl(document.body) ||
            trySelector('[ng-app]') || trySelector('[ng\\:app]') ||
            trySelector('[ng-controller]') || trySelector('[ng\\:controller]');
    }
};

var binding = arguments[0];
var exactMatch = arguments[1];
var using = arguments[3] || document;
if (angular.getTestability) {
    return getNg1Hooks(arguments[2]).$$testability.
        findBindings(using, binding, exactMatch);
}
var bindings = using.getElementsByClassName('ng-binding');
var matches = [];
for (var i = 0; i < bindings.length; ++i) {
    var dataBinding = angular.element(bindings[i]).data('$binding');
    if (dataBinding) {
        var bindingName = dataBinding.exp || dataBinding[0].exp || dataBinding;
        if (exactMatch) {
            var matcher = new RegExp('({|\\s|^|\\|)' +
                /* See http://stackoverflow.com/q/3561711 */
                binding.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&') +
                '(}|\\s|$|\\|)');
            if (matcher.test(bindingName)) {
                matches.push(bindings[i]);
            }
        } else {
            if (bindingName.indexOf(binding) != -1) {
                matches.push(bindings[i]);
            }
        }
    }
}
return matches;) inner text is 'Hello Julie!'
